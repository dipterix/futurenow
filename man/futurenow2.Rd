% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/future.R
\name{futurenow2}
\alias{futurenow2}
\title{Wrapper of 'future'}
\usage{
futurenow2(
  expr,
  envir = parent.frame(),
  substitute = TRUE,
  lazy = FALSE,
  seed = FALSE,
  globals = TRUE,
  packages = NULL,
  label = NULL,
  gc = FALSE,
  listener.delay = 0.1,
  ...
)
}
\arguments{
\item{expr}{R expression}

\item{envir}{Environment to evaluate \code{expr}}

\item{substitute, lazy, seed, globals, packages, label, gc}{See also \code{\link[future]{future}}}

\item{listener.delay}{Intervals for listeners}
}
\description{
Provides additional code for 'future' that allows communication
from 'future' clusters back to main session during the runtime
}
\examples{

library(future)
library(futurenow)

# ---- Example 1: Handle large dataset in main session -------
if(interactive()){

  # Create a large dataset that will fail the future
  x <- rnorm(1e6)
  options(future.globals.maxSize = 1000)
  plan('multisession', workers = 2L)

  # This will fail because x exceed `future.globals.maxSize`
  future({
    pid <- Sys.getpid()
    result <- pid + mean(x)
    result
  })

  fnow <- futurenow({
    pid <- Sys.getpid()

    run_in_master({
      # This code will run in master
      mean_x <- mean(x)

      # register results back to future
      register_name(mean_x)
    })

    mean_x + pid

  })

  value(fnow)

}

# ---- Example 2: Progressbar in Shiny app -------
if(interactive()){

  library(shiny)

  ui <- fluidPage(
    actionButton("ok", "Run")
  )

  server <- function(input, output, session) {
    observeEvent(input$ok, {
      plan('multisession')

      p <- Progress$new(session = session, min = 0, max = 10)

      results <- lapply(1:10, function(i){
        futurenow({
          # Run something
          Sys.sleep(1)
          # inc progress bar
          run_in_master({
            p$inc(amount = 1, message = 'Running item', detail = i)
          })
        })
      })
      value(results)

      p$clone()
    })
  }

  shinyApp(ui, server)


}


}
